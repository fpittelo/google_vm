name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - qa
      - main

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read  # Default permission for accessing the repo

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth for dev branch
        if: github.ref == 'refs/heads/dev'
        id: 'auth-dev'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.DEV_ID_PROVIDER }}
          service_account: ${{ secrets.DEV_SA }}

      - name: Set auth for qa branch
        if: github.ref == 'refs/heads/qa'
        id: 'auth-qa'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.QA_ID_PROVIDER }}
          service_account: ${{ secrets.QA_SA }}
      
      - name: Set auth for main branch
        if: github.ref == 'refs/heads/main'
        id: 'auth-main'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.MAIN_ID_PROVIDER }}
          service_account: ${{ secrets.MAIN_SA }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Check if GCS bucket exists
        id: check-bucket
        run: |
          if gsutil ls -b gs://iaac-gcp-vm-dev-terraform; then
            echo "Bucket already exists."
            echo "bucket_exists=true" >> $GITHUB_ENV
          else
            echo "Bucket does not exist."
            echo "bucket_exists=false" >> $GITHUB_ENV
          fi

      - name: Create GCS bucket
        if: env.bucket_exists == 'false'
        run: |
          gsutil mb -l europe-west6 gs://iaac-gcp-vm-dev-terraform

      - name: Create backend folder
        run: |
          echo "Creating backend folder in the bucket"
          gsutil cp /dev/null gs://iaac-gcp-vm-dev-terraform/backend/

  terraform-setup:
    name: Terraform Set Up
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth for dev branch
        if: github.ref == 'refs/heads/dev'
        id: 'auth-dev'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.DEV_ID_PROVIDER }}
          service_account: ${{ secrets.DEV_SA }}

      - name: Set auth for qa branch
        if: github.ref == 'refs/heads/qa'
        id: 'auth-qa'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.QA_ID_PROVIDER }}
          service_account: ${{ secrets.QA_SA }}

      - name: Set auth for main branch
        if: github.ref == 'refs/heads/main'
        id: 'auth-main'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.MAIN_ID_PROVIDER }}
          service_account: ${{ secrets.MAIN_SA }}
      
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform

      - name: Initialize Terraform
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=iaac-gcp-vm-dev-terraform" \
            -backend-config="prefix=backend/terraform/state"

  vm-deployment:
    name: VM Deployment
    runs-on: ubuntu-latest
    needs: terraform-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth for dev branch
        if: github.ref == 'refs/heads/dev'
        id: 'auth-dev'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.DEV_ID_PROVIDER }}
          service_account: ${{ secrets.DEV_SA }}

      - name: Set auth for qa branch
        if: github.ref == 'refs/heads/qa'
        id: 'auth-qa'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.QA_ID_PROVIDER }}
          service_account: ${{ secrets.QA_SA }}

      - name: Set auth for main branch
        if: github.ref == 'refs/heads/main'
        id: 'auth-main'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.MAIN_ID_PROVIDER }}
          service_account: ${{ secrets.MAIN_SA }}
      
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform

      - name: Set GitHub Run ID
        run: echo "github_run_id=${{ github.run_id }}" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=iaac-gcp-vm-dev-terraform" \
            -backend-config="prefix=backend/terraform/state"

      - name: Apply Terraform configuration
        run: |
          cd infra
          terraform apply -var-file="dev.tfvars" -var="github_run_id=${{ github.run_id }}" -auto-approve